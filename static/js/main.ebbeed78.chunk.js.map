{"version":3,"sources":["reducers/index.js","store/index.js","App.js","actions/index.js","registerServiceWorker.js","index.js","images/girl.png"],"names":["reducer","state","action","type","totalAmount","payload","store","createStore","username","App","getState","handleWithdrawMoney","e","amount","target","dataset","dispatch","withdrawMoney","className","src","photographer","alt","formatNumber","prefix","data-amount","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","rootElement","document","getElementById","render","ReactDOM","subscribe","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"kRAaeA,EAbC,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,2BACFF,GAAK,IACRG,YAAaH,EAAMG,YAAcF,EAAOG,UAG5C,QACE,OAAOJ,ICCEK,EAFDC,YAAYP,EALL,CACnBQ,SAAU,QACVJ,YAAa,UCiCAK,EA/BH,WACV,MAAkCH,EAAMI,WAAhCN,EAAW,EAAXA,YAAaI,EAAQ,EAARA,SAEfG,EAAsB,SAACC,GAC3B,IAAMC,EAASD,EAAEE,OAAOC,QAAQF,OAChCP,EAAMU,SCZmB,SAACH,GAAM,MAAM,CACxCV,KAAM,WACNE,QAASQ,GDUQI,CAAcJ,KAG/B,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,eAAeC,IAAKC,IAAcC,IAAI,SACrD,uBAAGH,UAAU,iBAAgB,UAAQV,EAAS,MAC9C,yBAAKU,UAAU,eACZI,IAAa,CAAEC,OAAQ,KAAvBD,CAA8BlB,GAC/B,uBAAGc,UAAU,qBAAoB,kBAGnC,6BAASA,UAAU,gBACjB,4BAAQM,cAAY,QAAQC,QAASd,GAAqB,oBAG1D,4BAAQa,cAAY,OAAOC,QAASd,GAAqB,oBAK3D,uBAAGO,UAAU,iBAAgB,wCEvB7BQ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBvC,QACfiC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,MCxEjE,IAAMC,EAAcC,SAASC,eAAe,QAEtCC,EAAS,WAAH,OAASC,IAASD,OAAO,kBAAC,EAAG,MAAKH,IAE9CG,IACA7C,EAAM+C,UAAUF,GDQD,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,0CAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,0CAAsB,sBAEnC7B,IAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAACsB,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAACC,GAClCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,eAKpBlC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAsB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCnCxBmC,I,kBCbAC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.ebbeed78.chunk.js","sourcesContent":["const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"WITHDRAW\":\r\n      return {\r\n        ...state,\r\n        totalAmount: state.totalAmount - action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"../reducers/\";\r\n\r\nconst initialState = {\r\n  username: \"Sarah\",\r\n  totalAmount: 2500750\r\n};\r\n\r\nconst store = createStore(reducer, initialState);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport formatNumber from \"format-number\";\nimport photographer from \"./images/girl.png\";\nimport \"./App.css\";\nimport store from \"./store\";\nimport { withdrawMoney } from \"./actions\";\n\nconst App = () => {\n  const { totalAmount, username } = store.getState();\n\n  const handleWithdrawMoney = (e) => {\n    const amount = e.target.dataset.amount;\n    store.dispatch(withdrawMoney(amount));\n  };\n\n  return (\n    <div className=\"App\">\n      <img className=\"App__userpic\" src={photographer} alt=\"user\" />\n      <p className=\"App__username\">Hello, {username}! </p>\n      <div className=\"App__amount\">\n        {formatNumber({ prefix: \"$\" })(totalAmount)}\n        <p className=\"App__amount--info\">Total Amount </p>\n      </div>\n\n      <section className=\"App__buttons\">\n        <button data-amount=\"10000\" onClick={handleWithdrawMoney}>\n          WITHDRAW $10,000\n        </button>\n        <button data-amount=\"5000\" onClick={handleWithdrawMoney}>\n          WITHDRAW $5,000\n        </button>\n      </section>\n\n      <p className=\"App__giveaway\">Give away all your cash to charity</p>\n    </div>\n  );\n};\n\nexport default App;\n","export const withdrawMoney = (amount) => ({\r\n  type: \"WITHDRAW\",\r\n  payload: amount\r\n});\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport store from \"./store\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst render = () => ReactDOM.render(<App />, rootElement);\n\nrender();\nstore.subscribe(render);\nregisterServiceWorker();\n","module.exports = __webpack_public_path__ + \"static/media/girl.1c4c0c8a.png\";"],"sourceRoot":""}